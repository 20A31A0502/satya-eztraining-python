#RANDOM MODULE:
import random as r
x="i love sweets"
print(r.sample(x,2))
OUTPUT:
['v', 'e']


#everytime it gives different output
a=[1,2,3,4,5,6]
r.shuffle(a)
print(a)
OUTPUT:
[5, 3, 4, 1, 6, 2]

a=[1,2,3,4,5,6]
print(r.choice(a))
OUTPUT:
4

b="welcome back"
print(r.choice(b))
OUTPUT:
e  

#will return random numbers between 0.0 to 1.0
#0.0 includes 1.0 excludes
a=r.random()
print(a)
OUTPUT:
0.4267128440494994

a=r.random()
print(r.randint(20,30))
OUTPUT:
25 

a=[10,20,30,40,50]
print(r.choices(a,k=15))#try with number
OUTPUT:
[30, 10, 30, 20, 40, 20, 50, 40, 30, 20, 10, 40, 20, 10, 20]

a=[10,20,30,40,50]
print(r.choices(a,d=15))#try with number
OUTPUT:
TypeError: Random.choices() got an unexpected keyword argument 'd'

s="hello good day"
print(r.choices(s,k=3))
OUTPUT:
['y', ' ', 'o']

#returns any random number
#between the range includes the
#range values
#float values
print(r.uniform(5,10))
OUTPUT:
6.905392940965166

#to find all the functions in the module
z=dir(r)
print(z)
OUTPUT:
['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', '_ONE', '_Sequence', '_Set', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_accumulate', '_acos', '_bisect', '_ceil', '_cos', '_e', '_exp', '_floor', '_index', '_inst', '_isfinite', '_log', '_os', '_pi', '_random', '_repeat', '_sha512', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'choices', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'lognormvariate', 'normalvariate', 'paretovariate', 'randbytes', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate']


#CALENDAR MODULE:
#DISPLAY WHOLE YEAR CALENDER
import calendar
print("full calendar")
print(calendar.calendar(2023))
OUTPUT:
full calendar
                                  2023

      January                   February                   March
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                   1             1  2  3  4  5             1  2  3  4  5
 2  3  4  5  6  7  8       6  7  8  9 10 11 12       6  7  8  9 10 11 12
 9 10 11 12 13 14 15      13 14 15 16 17 18 19      13 14 15 16 17 18 19
16 17 18 19 20 21 22      20 21 22 23 24 25 26      20 21 22 23 24 25 26
23 24 25 26 27 28 29      27 28                     27 28 29 30 31
30 31

       April                      May                       June
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                1  2       1  2  3  4  5  6  7                1  2  3  4
 3  4  5  6  7  8  9       8  9 10 11 12 13 14       5  6  7  8  9 10 11
10 11 12 13 14 15 16      15 16 17 18 19 20 21      12 13 14 15 16 17 18
17 18 19 20 21 22 23      22 23 24 25 26 27 28      19 20 21 22 23 24 25
24 25 26 27 28 29 30      29 30 31                  26 27 28 29 30

        July                     August                  September
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                1  2          1  2  3  4  5  6                   1  2  3
 3  4  5  6  7  8  9       7  8  9 10 11 12 13       4  5  6  7  8  9 10
10 11 12 13 14 15 16      14 15 16 17 18 19 20      11 12 13 14 15 16 17
17 18 19 20 21 22 23      21 22 23 24 25 26 27      18 19 20 21 22 23 24
24 25 26 27 28 29 30      28 29 30 31               25 26 27 28 29 30
31

      October                   November                  December
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                   1             1  2  3  4  5                   1  2  3
 2  3  4  5  6  7  8       6  7  8  9 10 11 12       4  5  6  7  8  9 10
 9 10 11 12 13 14 15      13 14 15 16 17 18 19      11 12 13 14 15 16 17
16 17 18 19 20 21 22      20 21 22 23 24 25 26      18 19 20 21 22 23 24
23 24 25 26 27 28 29      27 28 29 30               25 26 27 28 29 30 31

#TO PRINT PARTICULAR MONTH IN THE CALENDAR
print("particular month")
print(calendar.month(2023,8))
OUTPUT:
particular month
    August 2023
Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31

#TO SET FIRST DAY IN A WEEK
print("set first day of the week")
calendar.setfirstweekday(calendar.FRIDAY)
print(calendar.month(2023,7))
OUTPUT:
set first day of the week
     July 2023
Fr Sa Su Mo Tu We Th
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31


#DATETIME MODULE:
import datetime
a=datetime.datetime.now()
print(a)
OUTPUT:
2023-02-03 10:15:16.376620


import datetime
a=datetime.datetime.now()
print(a)
sv=a.strftime("%y")#lower case
fv=a.strftime("%Y")#UPPER case
print("year short version",sv)
print("year full version",fv)
OUTPUT:
2023-02-03 10:17:09.328947
year short version 23
year full version 2023

#FUNCTIONS:
classifications:
1.predefined functions
2.for code reusability ,we use functions
eg-
lets say we want to use a particular concept multiple times in our program instead of writing the same code multiple times we can write it once include that inside a function and can call the function whereever we need it
 
TYPES:
1.functions without argument without return value
**program-1:
def sample(): # function def or des
    print("great day")
    print("happy time")
sample() #call
print("today")
output:
great day
happy time
today

**
def sample(): # function def or des
    print("great day")
    print("happy time")
sample() #call
print("today")
sample()
OUTPUT:
great day
happy time
today
great day
happy time

**
def multi():
     n1=int(input("number:"))
     n2=int(input("number:"))
     n3=int(input("number:"))
     product=n1*n2*n3
     print(product)
multi()
OUTPUT:
number:1
number:2
number:3
6

2.functions without argument with return value
PROGRAM:
def multi():
     n1=int(input("number:"))
     n2=int(input("number:"))
     n3=int(input("number:"))
     product=n1*n2*n3
     return product
res=multi()
print(res)
OUTPUT:
number:1
number:2
number:3
6


3.functions with argument without return value
#with argument and without return value
#static input
def multi(n1,n2,n3):
    product=n1*n2*n3
    print(product)
multi(3,4,5)
output:
60
    
#user input:
def multi(n1,n2,n3):
    product=n1*n2*n3
    print(product)
    
n1=int(input("enter n1:"))
n2=int(input("enter n2:"))
n3=int(input("enter n3:"))
multi(n1,n2,n3)
OUTPUT:
enter n1:2
enter n2:3
enter n3:4
24
#we can give diff varibles in function nd main function
def multi(a,b,nc):
    product=a*b*c
    print(product)
    
n1=int(input("enter n1:"))
n2=int(input("enter n2:"))
n3=int(input("enter n3:"))
multi(n1,n2,n3)
OUTPUT:
enter n1:2
enter n2:3
enter n3:4
24

4.functions with argument with return value
#static input
def multi(n1,n2,n3):
    product=n1*n2*n3
    return product
res=multi(3,4,5)
print(res)
OUTPUT:
60

#user input:
def multi(a,b,c):
    product=a*b*c
    return product
    
n1=int(input("enter n1:"))
n2=int(input("enter n2:"))
n3=int(input("enter n3:"))
res=multi(n1,n2,n3)
print(res)
OUTPUT:
enter n1:2
enter n2:3
enter n3:4
24

#PROGRAM:
1.lemons program using type1
def lemon():
    n=int(input("No of lemons:"))
    if n<21:
        print("Less by ",21-n," lemons")
    elif n>21:
        print("Excessive by ",n-21," lemons")
    else:
        print("There are correct number of lemons")
lemon()
Output:
No of lemons:43
Excessive by  22  lemons


2.find factors of the given number using functions type-2
**
def factors():
    x=int(input("Number:"))
    i=1
    l=[]
    for i in range(1, x + 1):
       if x % i == 0:
           l.append(i)
    return l
print("Factor:",factors())
Output:
Number:45
Factor: [1, 3, 5, 9, 15, 45]

3.print muitiplication table for given table using functions type-3(user input)
def multable(m):
    for i in range(1,11):
        print(m,"x",i,"=",i*m)
m=int(input("Number:"))
multable(m)
Output:
Number:3
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
3 x 10 = 30
 
4.find out sum of digits of given number using functions type-4
def sum_of_digits(n):
    tot=0
    while(n>0):
      dig=n%10
      tot=tot+dig
      n=n//10
    return tot
n=int(input("enter a number:"))
res=sum_of_digits(n)
print(res)
OUTPUT:
enter a number:67
13

#RECURSIVE FUNCTION or RECURSION METHOD:a function which calls itself is called recursive function.
this concept is called "RECURSION".

PROGRAM:
def display():
    n=int(input("enter a number:"))
    if n==1:
        display()
    else:
        print("over")
display()
OUTPUT:
enter a number:1
enter a number:1
enter a number:1
enter a number:1
enter a number:1
enter a number:1
enter a number:2
over

PROGRAM-2
#FACTORIAL PROGRAM USING RECURSIVE FUNCTION
def fact(n):
    if n==0:
        return 1
    return n*fact(n-1)#function call-its call
res=fact(5)
print(res)

#LOGIC
'''4!
4*fact(3)
4*3*fact(2)
4*3*2*fact(1)
4*3*2*1*fact(0)
hence output is 24

#function returns more values:
#addition and subtraction of 2 numbers in one
#function

def add_sub(x,y):
    sub=x-y
    add=x+y
    return sub,add
res1,res2=add_sub(20,10)
print(res1)
print(res2)
OUTPUT:
10
30

#variable length method
def summ(*a):
    c=0
    for i in a:
        c=c+i
    print(c)
summ(10,2,3,1,2)
OUTPUT:
18


 