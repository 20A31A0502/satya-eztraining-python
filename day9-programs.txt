linkedlist DELETE operation:

#while creating LL we gonna do it in ascending order
#one prg with multiple concepts
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class linkedlist:
    def __init__(self):
        self.head=None
    def printlist(self):
        temp=self.head
        if not temp:
            print("List is empty")
        else:
            print("start:",end=" ")
            while temp:
                print(temp.data,end="->")
                temp=temp.next
        print("end.")
    def insert(self,data):
        new_node=Node(data)
        #if the linked list is empty
        if self.head is None:
            self.head=new_node
        #if the data is smaller than the head
        elif self.head.data >= new_node.data:
            new_node.next=self.head
            self.head=new_node
        else:
            #locate the node before the insertion point
            current=self.head
            while current.next and new_node.data>current.next.data:
                current=current.next
                #insertion
            new_node.next=current.next
            current.next=new_node
    def delete(self,key):
        #if the list is empty
        if self.head is None:
            print("Deletion Error: The list is empty")
            return
        #if the key is in head
        if self.head.data==key:
            self.head=self.head.next
            return
        #find position of first occurence of the
        current=self.head     #here current is nothing but temp
        while current:
            if current.data==key:
                break
            previous=current
            current=current.next
        #if the key was not found
        if current is None:
            print("Deletion Error:key not found")
        else:
            previous.next=current.next
#__name is python special variable
if __name__=="__main__":
    #create an object
    LL=linkedlist()
    print(" ")
    #insert some nodes
    LL.insert(10)
    LL.insert(12)
    LL.insert(8)
    LL.insert(11)
    LL.insert(14)

    LL.printlist()
    LL.delete(12)
    LL.delete(8)
    LL.delete(10)
    LL.printlist()
OUTPUT:
start: 8->10->11->12->14->end.
start: 11->14->end.

#program using user defined modules
#creating my modules
#fn in my another file,acting as a module
import fn
fn.printing()
OUTPUT:
hi

2:
import fn
fn.printing()
print("__name__"
OUTPUT:
hi
__main__

3.
#let's say u have lot of functions in ur project
#u can give all definitions at one place
#and give all function call inside main then thr will be a format
#easy to read,especially for others those who are seing ur program

print("before function")
def f1():
    print("f1")
def f2():
    print("f2")
def f3():
    print("f3")
if __name__=="__main__":
    f1()
    f2()
    f3()
OUTPUT:
before function
f1
f2
f3

#create node
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.display()
OUTPUT:
100 <--> 200 <--> 

#DOUBLE LINKED LIST:
#INSERTION AT THE BEGINING        
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
     def __init__(self):
        self.head=None

     def insert_start(self):
         n=Node(300)
         temp=self.head
         temp.prev=n
         n.next=temp
         self.head=n
     def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.insert_start()
l.display()
OUTPUT:
300 <--> 100 <--> 200 <--> 



#INSERTION AT THE ENDING
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
     def __init__(self):
        self.head=None
     def insert_end(self):
        n=Node(300)
        temp=self.head
        while temp.next is not None:
            temp=temp.next
        temp.next=n
        n.prev=temp
         
     def display(self):
         if self.head is None:
             print("Empty")
         else:
             temp=self.head
             while temp:
                 print(temp.data,"<-->",end=" ")
                 temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.insert_end()
l.display()
OUTPUT:
100<-->200<-->300<-->


#INSERTION AT THE POSITION
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
     def __init__(self):
        self.head=None
     def insert_pos(self,pos):
         n=Node(300)
         temp=self.head
         for i in range(1,pos-1):
            temp=temp.next
         n.prev=temp
         n.next=temp.next
         temp.next.prev=n
         temp.next=n
     def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.insert_pos(0)
l.display()
OUTPUT:
100 <--> 300 <--> 200 <--> 


#DELETION AT THE BEGINING
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
     def __init__(self):
        self.head=None
     def delete_begining(self):
         temp=self.head
         self.head=temp.next
         temp.next=None
     def display(self):
        if self.head is None:
            print("Empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.delete_begining()
l.display()
OUTPUT:
200 <--> 

#DELETION AT THE ENDING
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
     def __init__(self):
        self.head=None
     def delete_end(self):
         temp=self.head.next
         prev=self.head
         while temp.next is not None:
             temp=temp.next
             prev=prev.next
         prev.next=None
     def display(self):
         if self.head is None:
            print("Empty")
         else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.delete_end()
l.display()
OUTPUT:
100 <--> 

#DELETION AT THE SPECIFIC POSITION
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
     def __init__(self):
        self.head=None
     def delete_position(self,pos):
         temp=self.head.next
         prev=self.head
         for i in range(1,pos-1):
             temp=temp.next
             prev=prev.next
         prev.next=temp.next
         temp.next=None
     def display(self):
         if self.head is None:
            print("Empty")
         else:
            temp=self.head
            while temp:
                print(temp.data,"<-->",end=" ")
                temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.delete_position(0)
l.display()
OUTPUT:
100<-->

#CREATING SINGLE CIRCULAR LINKEDLIST
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class createlist:
    def __init__(self):
        self.head=Node(None)
        self.tail=Node(None)
        self.head.next=self.tail
        self.tail.next=self.head

        #adding node at end of ll:
    def add(self,data):
        newNode=Node(data)
        #IS EMPTY?
        if self.head.data is None:
            self.head=newNode
            self.tail=newNode
            newNode.next=self.head
        else:
            self.tail.next=newNode
            self.tail=newNode
            #it is cll so tail will point to head
            self.tail.next=self.head
    def display(self):
        current=self.head
        if self.head is None:
            print("List is Empty")
            return
        else:
            print("Nodes of the circular linked list:")
            print(current.data,"-->")
            while(current.next != self.head):
                current = current.next
                print(current.data,"-->")
class circularlinkedlist:
    C1=createlist()
    C1.add("S")
    C1.add("A")
    C1.add("T")
    C1.add("Y")
    C1.add("A")
    C1.display()
OUTPUT:
Nodes of the circular linked list:
S -->
A -->
T -->
Y -->
A -->