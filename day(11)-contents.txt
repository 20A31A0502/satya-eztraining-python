#BINARY TREE:
A node can have max 2 children.

#BINARY TREE TRAVERSAL:
1.INORDER---left->root->right(LDR)  #data(D)=root
2.PREORDER---root->left->right(DLR)
3.POSTORDER---left->right->root(LRD)

                  A
        
             B           C
        
         D       E     F     G
INORDER TRAVERSAL:D B E A F C G

                  15

           24            54

       35             62     13
INORDER TRAVERSAL:35 24 15 62 54 13


                 45

          25             75

      15     35          
PREORDER TRAVERSAL:45 25 15 35 75
INORDER TRAVERSAL:15 25 35 45 75


                   1
   
          2               3
 
     4       5         6      7

            8                9     10

PREORDER TRAVERSAL:1 2 4 5 8 3 6 7 9 10
 INORDER TRAVERSAL:4 2 8 5 1 6 3 9 7 10  
  

                   1

         2                    3

    4      5              6       7
POSTORDER:4 5 2 6 7 3 1
INORDER:4 2 5 1 6 3 7
PREORDER:1 2 4 5 3 6 7 

 
#BREADTH FIRST SEARCH(BFS)
#DEPTH FIRST SEARCH(DFS) 

            1

      2          3

 4       5

POSTORDER:4 5 2 3 1
INORDER:4 2 5 1 3 
PREORDER:1 2 4 5 3

#TYPES OF BINARY TREES:
1.FULL BINARY TREE:all the nodes will have 0(zero) or 2 children
ex:
              12
           
         6         14
   
     23     45 
2.PATHOLOGIC BINARY TREE:all the nodes will have 0(zero) or 1 children
ex:
            12

        6      
   
     7

3.SKEWED BINARY TREE:
2 TYPES:
a.LEFT SKEWED BINARY TREE
b.RIGHT SKEWED BINARY TREE
 
TYPES OF BINARY TREES BASED ON NO.OF LEVELS:
1.COMPLETE BINARY TREE:
->Every level should be full or complete
->in last level it is incomplete notes should present at extreme left side:
ex:
              12

         8            18

     4      10

2.PERFECT BINARY TREE:
-> all internal notes which have 2 children and leaf node should be at the same levels
ex:
                  12

         8            18

     4      10      16    20

3.BALANCED BINARY TREE:
A balanced binary tree is a binary tree that follows the 3 conditions:
->The height of the left and right tree for any node does not differ by more than 1(0 OR 1).
->The left subtree of that node is also balanced.
->The right subtree of that node is also balanced

DEPTH OF A NODE=[HEIGHT OF LEFT SUBTREE-HEIGHT OF RIGHT SUBTREE]

EX:
              0(d=1)                                        0(d=2)

       1(d=0)            2(d=0)                     1 (d=1)             2(d=0)
 
  3 (d=0)      4(d=0)                          3(d=1)        4(d=0)

balanced                                   5(d=0)

                                                 unbalnced

#BINARY SEARCH TREE(BST):
all the left side elements should be less than its parent 
all the right side elements should be greater than its parent
ex:           12                                           15

           18      20                               13            18

        17       11    23                       10      14      17     20

this is just binary tree                         this is binary search tree and binary tree


ex:


#80 10 15 16 45 0 92 73 44
#200 25 5 10 15 -10 30 61 97 -88 -55 77
#1 2 3 4 5 -1 -2 -3 -4 -5 0

            44                                    10                                          0                        
  
     15            73                    -10             30                           -2              4

  10    16       45    80            -55      5      25       77                -4         -1      2      5

 
0                        92      -88              15       61     97        -5     -3            1   3
                                                                     
                                                                     200

#DELETION IN BST: